npx sequelize --help
npx sequelize init
LEARN: Generic Type
index.ts of sequelize: create process.env.NODE_ENV  to create environment

* postgresql:
\l: list all database

npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string


npx sequelize-cli db:migrate

npx sequelize-cli db:migrate:undo

npx sequelize migration:create --name add-collumn-parentCategoryId

SequelizeSlugify.slugifyModel(User, {source: ['name']});


//BUG: 
1. Can not import SequelizeSlugify
2. Can not migrateData
3. can not run seed , how to run specific file in ts
NOTE: SEED DATA
npx sequelize-cli seed:generate --name demo-user
npx sequelize-cli db:seed:all
npx sequelize db:seed --seed 20221022150434-user.js
npx sequelize-cli db:seed:undo
npx sequelize-cli db:seed:undo:all
npx sequelize-cli db:seed:undo --seed name-of-seed-as-in-data

NOTE: Handy query:
  const user = await db.user.findOne({
    where: {firstName: 'Brian'},
    attributes: ['firstName']
  });
  const numberOfRecordsUpdated = await db.user.update({
    lastName: 'Taco'
  }, {
    where: {
      firstName: 'Brian'
    }
  });

  console.log('post: ', post.get())

  await db.post.destroy({
    where: {id: post.get().id}
  })
-----
    const [post, created] = await db.post.findOrCreate({
    where: {
      title: 'taco',
      body: 'burrito',
      authorName: 'Brian'
    }
  });
  console.log('post: ', post.get())
  await db.post.destroy({
    where: {id: post.get().id}
  })
-------
  const [tag1, tagCreated] = await db.tag.findOrCreate({
    where: {name: "food"}
  })

  console.log('tag1: ', tag1.get())

  await post.addTags(tag1)





  ----------------------------------------

Model.findAll({
  attributes: { exclude: ['baz'] }
});

// Delete everyone named "Jane"
await User.destroy({
  where: {
    firstName: "Jane"
  }
});

// Truncate the table
await User.destroy({
  truncate: true
});

const jane = await User.create({ name: "Jane" });
console.log(jane.name); // "Jane"
await jane.destroy();
// Now this entry was removed from the database

const jane = await User.create({ name: "Jane" });
console.log(jane.name); // "Jane"
jane.name = "Ada";
// the name is still "Jane" in the database
await jane.reload();
console.log(jane.name); // "Jane"


NOTE: EAGER LOAD:
      --------------------------
// open all of nested level:
const lineItemsInOrder = await LineItem.findAll({
      where: { cartId: cart.id, variantId: variantIdsArr },
      include: [{ all: true, nested: true }],
    });
    --------------------------
const userCart = await Cart.findAll({ include: User });
// [
    {
        "id": 1,
        "userId": 1,
        "createdAt": "2022-10-24T06:49:53.932Z",
        "updatedAt": "2022-10-24T06:49:53.932Z",
        "user": {
            "id": 1,
            "email": "mel@gmail.com",
            "phone": 12345678,
            "password": "$2b$10$nA3XtbTrGdwTLL1rGp2mXuJklxs.8LCr6gKqRTpYYz.K7ZPW70UT2",
            "address": "193 Bishan street 13",
            "postalCode": 570193,
            "username": "mel",
            "isAdmin": false,
            "createdAt": "2022-10-24T06:23:42.471Z",
            "updatedAt": "2022-10-24T06:23:42.471Z"
        }
    }
]
* for Alias Field:
const users = await User.findAll({
  include: { model: Tool, as: 'Instruments' }
});

User.findAll({
  include: {
    model: Tool,
    as: 'Instruments'
    where: {
      size: {
        [Op.ne]: 'small'
      }
    }
  }
});